import viajerosDeTierraMedia.*

describe "Viajeros de Tierra Media" {
	var sam = new Viajero(10, ['lembas'])
	var frodo = new Viajero(15, ['anillo'])
	var gandalf = new Viajero(150, ['magia', 'baston'])
	
	var grupo = new Grupo([sam, frodo, gandalf])
	
	var zona = new Zona(['lembas', 'anillo'], 50)
	var zonaFacil = new Zona([], 10)
	var zonaDificil = new Zona([], 1000000)
	
	test "El grupo puede atravesar la zona y suben de nivel matando orcos" {
		var nivel = grupo.nivelTotal()
		grupo.atravesarZona(zona)
		
		assert.equals(nivel+grupo.cantidadDeIntegrantes(), grupo.nivelTotal())
		assert.equals(0, zona.cantidadDeOrcos())
	}
	
	test "El grupo no puede atravesar la zona porque no tienen nivel suficiente" {

		assert.throwsExceptionWithType(new NivelInsuficiente(), 
			{grupo.atravesarZona(zonaDificil)}
		)
	}
	
	test "El grupo tiene los elementos"{
		assert.that(grupo.tieneElementos(zona))
	}
	test "El grupo no tiene los elementos"{
		grupo.quitarViajero(sam)
		assert.notThat(grupo.tieneElementos(zona))
	}
	
	test "El grupo no puede atravesar la zona porque les falta un elemento" {
		grupo.quitarViajero(sam)
		
		assert.throwsExceptionWithType(new NoTieneElementos(), 
			{grupo.atravesarZona(zona)}
		)
	}
	
	test "El grupo transita un camino exitosamente"{
		var camino = new Camino()
		camino.agregarZona(zona)
		camino.agregarZona(zonaFacil)
		
		camino.transitadoPor(grupo)
		assert.equals(0, zona.cantidadDeOrcos())
		assert.equals(0, zonaFacil.cantidadDeOrcos())
	}
	
	test "El grupo no puede transitar el camino pero sacrifican a uno"{
		var camino = new Camino()
		camino.agregarZona(zona)
		camino.agregarZona(zonaDificil)
		camino.agregarZona(zonaFacil)
		
		camino.transitadoPor(grupo)
		assert.equals(0, zona.cantidadDeOrcos())
		assert.equals(1000000, zonaDificil.cantidadDeOrcos())
		assert.equals(0, zonaFacil.cantidadDeOrcos())
	}
	
	test "El grupo no puede sacrificar a mas de los que tiene"{
		var camino = new Camino()
		camino.agregarZona(zonaDificil)
		camino.agregarZona(zonaDificil)
		camino.agregarZona(zonaDificil)
		camino.agregarZona(zonaDificil)
		
		assert.throwsExceptionWithType(new NoHayMasGente(), 
			{camino.transitadoPor(grupo)}
			)
	}
}