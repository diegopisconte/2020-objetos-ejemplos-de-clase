import model.jugadores.*
import model.equiposDeQuidditch.*
import model.armadoDeEquipo.*

import creadorDeEquipoDePrueba.*

describe "partidos" {
	const guardian = new Guardian(reflejos = 3)
	const buscador = new Buscador(reflejos = 5, vision = 2)
	const cazador = new Cazador(punteria = 3, fuerza = 3)
	const golpeador = new Golpeador(punteria = 2, fuerza = 3)
	
	// Creo un equipo rival con jugadores mediocres por default
	var rival = creadorDeEquipoDePrueba.crearEquipo()
	
	test "Cuando un equipo juega contra otro, sus jugadores juegan" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConBuscador(buscador)
		buscador.distanciaSnitch(100)
		equipo.jugarContra(rival)
		assert.that(buscador.distanciaSnitch() < 100)
	}
	
	test "Cuando un guardian juega su turno, no pasa nada" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConGuardian(guardian)		
		guardian.jugarContra(rival, equipo)
		assert.equals(0, equipo.puntos())
	}
	
	test "Cuando un buscador juega un turno reduce su distancia a la snitch" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConBuscador(buscador)
		buscador.jugarContra(rival, equipo)
		assert.equals(990, buscador.distanciaSnitch())
	}
	
	test "Cuando un buscador atrapa la snitch, suma 150 puntos a su equipo" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConBuscador(buscador)
		buscador.distanciaSnitch(5)
		
		buscador.jugarContra(rival, equipo)
		assert.equals(150, equipo.puntos())
	}
	
	test "Cuando un cazador anota, suma 10 puntos" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConCazador(cazador)
		cazador.obtenerQuaffle()
		
		cazador.jugarContra(rival, equipo)
		assert.equals(10, equipo.puntos())
	}
	
	test "Cuando un cazador es bloqueado, no suma puntos" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConCazador(cazador)
		const rivalMasHabilidoso = new Guardian(reflejos = 20)
		rival = creadorDeEquipoDePrueba.crearEquipoConGuardian(rivalMasHabilidoso)
		cazador.obtenerQuaffle()
		
		cazador.jugarContra(rival, equipo)
		assert.equals(0, equipo.puntos())
	}
	
	test "Cuando un cazador que no tiene la quaffle juega su turno, no suma puntos" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConCazador(cazador)
		
		cazador.jugarContra(rival, equipo)
		assert.equals(0, equipo.puntos()) 
	}
	
	test "Cuando un cazador que no tiene la quaffle juega su turno, el rival no obtiene la quaffle" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConCazador(cazador)
		assert.notThat(rival.tieneQuaffle()) // Ningún rival tiene la quaffle antes de que juegue
		
		cazador.jugarContra(rival, equipo)
		assert.notThat(rival.tieneQuaffle()) // Y después tampoco
	}
	
	test "Cuando un cazador con la quaffle juega su turno, la pierde" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConCazador(cazador)
		cazador.obtenerQuaffle()
		
		cazador.jugarContra(rival, equipo)
		assert.notThat(cazador.tieneQuaffle())
	}
	
	test "Cuando un cazador que tiene la quaffle juega su turno, la obtiene el rival mas habilidoso que puede tener la quaffle" {
		// El cazador rival más hábil no es suficientemente hábil para bloquear
		const rivalQueSeQuedaConLaQuaffle = new Cazador(punteria = 4, fuerza = 3)
		// Pero este golpeador rival sí puede bloquear
		const rivalQueBloquea = new Golpeador(punteria = 12, fuerza = 13)
		
		rival = creadorDeEquipoDePrueba.crearEquipoCon({ armadorDeEquipos =>
			armadorDeEquipos.agregarCazador(rivalQueSeQuedaConLaQuaffle)
			armadorDeEquipos.agregarGolpeador(rivalQueBloquea)
		})
		
		const equipo = creadorDeEquipoDePrueba.crearEquipoConCazador(cazador)
		cazador.obtenerQuaffle()
		
		cazador.jugarContra(rival, equipo)
		assert.that(rivalQueSeQuedaConLaQuaffle.tieneQuaffle())
	}
	
	test "Cuando un golpeador juega, puede apuntarle a un cazador del equipo rival que tenga la quaffle, haciendo que la pierda" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConGolpeador(golpeador)
		cazador.obtenerQuaffle()
		rival = creadorDeEquipoDePrueba.crearEquipoConCazador(cazador)
		
		golpeador.jugarContra(rival, equipo)
		
		assert.notThat(rival.tieneQuaffle())
	}
	
	test "Cuando un golpeador juega y golpea a un cazador del equipo rival, su equipo obtiene la quaffle" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConGolpeador(golpeador)
		cazador.obtenerQuaffle()
		rival = creadorDeEquipoDePrueba.crearEquipoConCazador(cazador)
		
		golpeador.jugarContra(rival, equipo)
		
		assert.that(equipo.tieneQuaffle())
	}
	
	test "Cuando un golpeador juega, puede apuntarle al buscador del equipo rival, distanciandolo de la snitch" {
		const equipo = creadorDeEquipoDePrueba.crearEquipoConGolpeador(golpeador)
		rival = creadorDeEquipoDePrueba.crearEquipoConBuscador(buscador)
		buscador.distanciaSnitch(100)
		
		golpeador.jugarContra(rival, equipo)
		assert.equals(120, buscador.distanciaSnitch())
	}
	
	test "Cuando un golpeador juega, elige sólo un blanco útil del equipo rival para golpear" {
		rival = creadorDeEquipoDePrueba.crearEquipoCon({armadorDeEquipos =>
			armadorDeEquipos.agregarBuscador(buscador)
			armadorDeEquipos.agregarCazador(cazador)
		})
		
		buscador.distanciaSnitch(100)
		cazador.obtenerQuaffle()
		
		const equipo = creadorDeEquipoDePrueba.crearEquipoConGolpeador(golpeador)
		golpeador.jugarContra(rival, equipo)
		
		assert.notThat(rival.tieneQuaffle())
		assert.equals(100, buscador.distanciaSnitch())
	}
}