import quidditch.*

describe "Quidditch" {
	const harry
	
	// Agrego el fixture para poder usar un par de objetos
	// con ciertas características predefinidas
	// para usarlos desde los tests
	fixture {
		harry = new Jugador(skills = 100, peso = 50)
	}
	
	test "El manejo de escoba de un jugador depende de sus skills y su peso" {
		assert.equals(2, harry.nivelDeManejoDeEscoba())
	}
	
	test "La velocidad de una Nimbus depende de sus a�os y su salud" {
		const nimbus = new Nimbus(salud = 50, anioFabricacion = 2001)
					
		assert.equals(31.5 , nimbus.velocidad())
	}

	test "La velocidad de una Saeta de Fuego es constante" {
		assert.equals(100, saetaDeFuego.velocidad())
	}
	
	test "La velocidad de un jugador depende de su escoba y su manejo de escoba" {
		assert.equals(200, harry.velocidad())
	}
	
	test "La habilidad de un jugador depende de su velocidad y sus skills" {
		assert.equals(300, harry.habilidad())
	}
	
	test "Un jugador le pasa el trapo a otro si es el doble de habilidoso" {
		const mediocre = new Jugador(skills = 50, peso = 60)
		const bueno = new Jugador(skills = 80, peso = 50)
		
		assert.that(harry.lePasaElTrapoA(mediocre))
		assert.notThat(harry.lePasaElTrapoA(bueno))
	}
	
	test "Si a un jugador lo golpea una bludger pierde 2 skills" {
		harry.recibirGolpe()
		assert.equals(98, harry.skills())
	}
	
	test "Si a un jugador con una Nimbus lo golpea una bludger, su escoba pierde salud" {
		const unaNimbus = new Nimbus(salud = 70)
		const unJugador = new Jugador(skills = 70, peso = 50, escoba = unaNimbus)
		unJugador.recibirGolpe()
		assert.equals(60, unaNimbus.salud())
	}
}