import ave.*
import ciudad.*
import wollok.game.*

test "volar a una ciudad resta tanta energia como distancia entre ciudades y hace al ave ahora estar en la nueva ciudad" {
 const puebloPaleta = new Ciudad(ubicacion=new Position(x=1, y=1), produccion="alfajores")
 const ciudadCeleste = new Ciudad(ubicacion=new Position(x=0, y=1), produccion="yerba")
 const pepita = new Ave(energia=2, ciudad=puebloPaleta)
 
 pepita.volarA(ciudadCeleste)
 
 assert.equals(1, pepita.energia())
 assert.equals(ciudadCeleste, pepita.ciudad())
}

test "no puede volar a una ciudad para la que necesitaria mas energia de la que tiene" {
 const puebloPaleta = new Ciudad(ubicacion=new Position(x=1, y=1), produccion="alfajores")
 const ciudadAzafran = new Ciudad(ubicacion=new Position(x=5, y=5), produccion="azafran")
 const pepita = new Ave(energia=2, ciudad=puebloPaleta)
 
 assert.throwsExceptionWithMessage("No tengo energia suficiente para volar", { pepita.volarA(ciudadAzafran) })
 assert.equals(2, pepita.energia())
 assert.equals(puebloPaleta, pepita.ciudad())
}

test "un ave puede tomar un producto en una ciudad y llevarlo a otro cubriendo una necesidad de este" {
 const ciudadCeleste = new Ciudad(ubicacion=new Position(x=0, y=1), produccion="yerba")
 ciudadCeleste.necesitar("alfajores")
 const puebloPaleta = new Ciudad(ubicacion=new Position(x=1, y=1), produccion="alfajores")
 const pepita = new Ave(energia=2, ciudad=puebloPaleta)
 
 pepita.transportarA(ciudadCeleste)
 
 assert.that(ciudadCeleste.satisfecha())
 assert.equals(ciudadCeleste, pepita.ciudad())
}

test "un ave no puede llevar un producto a una ciudad para la cual no le alcanza la energia para viajar" {
 const ciudadAzafran = new Ciudad(ubicacion=new Position(x=5, y=5), produccion="azafran")
 ciudadAzafran.necesitar("alfajores")
 const puebloPaleta = new Ciudad(ubicacion=new Position(x=1, y=1), produccion="alfajores")
 const pepita = new Ave(energia=2, ciudad=puebloPaleta)
 
 assert.throwsExceptionWithMessage("No tengo energia suficiente para volar", { pepita.transportarA(ciudadAzafran) })
 assert.notThat(ciudadAzafran.satisfecha())
 assert.equals(puebloPaleta, pepita.ciudad())
}

test "cuando un ave descansa recupera 20 de energia" {
  const puebloPaleta = new Ciudad(ubicacion=new Position(x=1, y=1), produccion="alfajores")
  const pepita = new Ave(energia=2, ciudad=puebloPaleta)
  
  pepita.descansar()
  
  assert.equals(22, pepita.energia())
}

